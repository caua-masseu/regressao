#' modelo_ridge <- regressao_linear(X, Y, type = "ridge", lambda = 0.5)
#'
#' # Exibir os coeficientes
#' print("Coeficientes do modelo linear:")
#' print(modelo_lm$coeficientes)
#' print("Coeficientes do modelo ridge:")
#' print(modelo_ridge$coeficientes)
#' @export
regressao_linear <- function(X, Y, type = "lm", lambda = 0.5) {
# Validação das entradas
if (!is.matrix(X) || !is.numeric(X) || !is.numeric(Y)) {
stop("X deve ser uma matriz numérica e Y deve ser um vetor numérico.")
}
if (nrow(X) != length(Y)) {
stop("O número de linhas em X deve ser igual ao comprimento de Y.")
}
if (!is.vector(Y) || length(dim(Y)) > 1) {
stop("Y deve ser um vetor unidimensional.")
}
if (nrow(X) == 0 || ncol(X) == 0) {
stop("X não pode ser vazio.")
}
if (any(is.na(X)) || any(is.na(Y))) {
stop("X e Y não podem conter valores NA.")
}
if (ncol(X) < 1) {
stop("X deve ter pelo menos uma coluna de preditores.")
}
if(type == "lm"){
coeficientes <- solve(t(X) %*% X) %*% t(X) %*% Y    #Podemos utilziar fatoracao QR para resolver essa inversa
}else if(type == "ridge"){
X <- scale(X)       #Normalizando o X, como indicando em algumas literaturas
coeficientes <- solve(t(X) %*% X + lambda*diag(ncol(X))) %*% t(X) %*% Y
}
Y_pred <- X %*% coeficientes
residuos <- Y - Y_pred
grafico_observado_vs_predito <- ggplot(data = data.frame(Y, Y_pred), aes(x = Y, y = Y_pred)) +
geom_point(color = "blue") + labs(title = "Observado vs Predito",
x = "Valores Observados", y = "Valores Preditos")
return(list(coeficientes = coeficientes,
residuos = residuos,
valores_preditos = Y_pred, obs_vs_pred = grafico_observado_vs_predito))
}
#' Análise de Resíduos de um Modelo de Regressão
#'
#' Esta função gera gráficos para analisar os resíduos de um modelo de regressão linear.
#' Ela plota o gráfico de resíduos vs. valores ajustados, um histograma dos resíduos,
#' um gráfico Q-Q para verificar a normalidade dos resíduos, e um gráfico de autocorrelação
#' dos resíduos.
#'
#' @param resultados Uma lista contendo os resultados do ajuste do modelo.
#' Deve incluir:
#' \itemize{
#'   \item \code{coeficientes}: vetor de coeficientes do modelo.
#'   \item \code{residuos}: vetor de resíduos do modelo.
#'   \item \code{valores_preditos}: vetor de valores preditos pelo modelo.
#' }
#'
#' @return Uma lista de gráficos gerados, contendo:
#' \itemize{
#'   \item \code{grafico_residuos_ajustados}: gráfico de resíduos vs. valores ajustados.
#'   \item \code{grafico_histograma_res}: histograma dos resíduos.
#'   \item \code{grafico_qq_res}: gráfico Q-Q dos resíduos.
#'   \item \code{grafico_acf_residuos}: gráfico de autocorrelação dos resíduos.
#' }
#'
#' @examples
#' # Ajustar o modelo
#' resultado <- ajustar_regressao_linear(X, Y)
#'
#' # Analisar os resíduos
#' graficos_resultados <- analise_residuos(resultado)
#'
#' @export
analise_residuos <- function(resultados){
if (class(resultados) != "list") {
stop("X deve ser uma matriz numérica e Y deve ser um vetor numérico.")
}
coeficientes <- resultados$coeficientes
residuos <- resultados$residuos
Y_pred <- resultados$valores_preditos
graficos <- list()
graficos$grafico_res_ajustados <- ggplot(data = data.frame(Y_pred, residuos), aes(x = Y_pred, y = residuos)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Gráfico de Resíduos vs. Ajustados",
x = "Valores Ajustados",
y = "Resíduos") + theme_bw()
graficos$grafico_histograma_res <- ggplot(data = data.frame(residuos), aes(x = residuos)) +
geom_histogram(binwidth = 0.5, color = "black") +
labs(title = "Histograma dos Resíduos",
x = "Resíduos") + theme_bw()
graficos$grafico_qq_res <- ggplot(data = data.frame(residuos), aes(sample = residuos)) + stat_qq() +
stat_qq_line(color = "red") +
labs(title = "Gráfico Q-Q da Normal dos Resíduos") + theme_bw()
acf_data <- acf(residuos, plot = FALSE, lag.max = 30)  # Calcula autocorrelação sem plotar
graficos$grafico_acf_residuos <- ggplot(data = data.frame(Lag = acf_data$lag[-1], ACF = acf_data$acf[-1]), aes(x = Lag, y = ACF)) +
geom_bar(stat = "identity") +
labs(title = "Autocorrelação dos Resíduos", x = "Lag", y = "Autocorrelação") +
geom_hline(aes(col = "blue"), yintercept = c(1.96/sqrt(nrow(residuos)), -1.96/sqrt(nrow(residuos)))) +
theme_bw()
acf_data <- acf(residuos, plot = FALSE, lag.max = 30)
acf_df <- data.frame(
Lag = acf_data$lag[-1],
ACF = acf_data$acf[-1]
)
# Calcula os limites de confiança
n <- length(residuos)
ci_upper <- 1.96 / sqrt(n)
ci_lower <- -1.96 / sqrt(n)
graficos$grafico_acf_residuos <- ggplot(acf_df, aes(x = Lag, y = ACF)) +
geom_bar(stat = "identity", fill = "blue", color = "black", width = 0.7) +
labs(title = "Autocorrelação dos Resíduos", x = "Lag", y = "Autocorrelação") +
geom_hline(yintercept = ci_upper, linetype = "dashed", color = "red") +
geom_hline(yintercept = ci_lower, linetype = "dashed", color = "red") +
theme_bw() +
return(graficos)
}
#' Conjunto de Dados Exemplo
#'
#' Um conjunto de dados simulado contendo informações sobre indivíduos,
#' incluindo idade, renda anual, ocupação, sexo, altura, anos de experiência
#' e satisfação. Este conjunto de dados pode ser usado para ajustar modelos
#' de regressão e realizar análises estatísticas.
#'
#' @format Um data frame com 100 observações e 7 variáveis:
#' \describe{
#'   \item{idade}{Idade do indivíduo (numérico, entre 18 e 65).}
#'   \item{renda_anual}{Renda anual do indivíduo (numérico, distribuído conforme uma distribuição gamma).}
#'   \item{ocupacao}{Tipo de ocupação do indivíduo (categórico: "Empregado", "Desempregado", "Autônomo").}
#'   \item{sexo}{Sexo do indivíduo (categórico: "Homem", "Mulher").}
#'   \item{altura}{Altura do indivíduo em centímetros (numérico, distribuído normalmente).}
#'   \item{anos_exp}{Anos de experiência do indivíduo (numérico, valor entre 0 e 17).}
#'   \item{satisfacao}{Nível de satisfação do indivíduo (numérico, varia de 0 a 10).}
#' }
#'
#' @source Arquivo gerado aleatoriamente com a função `sample`, `rgamma` e `rnorm`.
"human"
regressao_linear(as.matrix(iris$Petal.Width), iris$Petal.Length) -> m1
analise_residuos(m1)
#' Ajustar um modelo de regressão linear
#'
#' @param X Uma matriz de variáveis preditoras (incluindo intercepto)
#' @param Y Um vetor da variável resposta
#' @param type Tipo de modelo a ser ajustado: "lm" para regressão linear simples ou "ridge" para regressão ridge. (default é "lm")
#' caso seja ridge, há uma normalização nos dados, ou seja, subtrai o desvio padrão e divide pela média.
#' @param lambda Parâmetro de penalização para regressão ridge (default é 0.5).
#' @return Uma lista contendo os coeficientes, resíduos, valores preditos e um gráfico.
#' @examples
#' # Criar a matriz de preditores e vetor de respostas
#' X <- as.matrix(dados[, c("idade", "renda_anual", "altura", "anos_exp")])
#' X <- cbind(1, X)  # Adiciona uma coluna de 1 para o intercepto
#' Y <- dados$satisfacao
#'
#' # Ajustar um modelo de regressão linear
#' modelo_lm <- regressao_linear(X, Y, type = "lm")
#'
#' # Ajustar um modelo de regressão ridge
#' modelo_ridge <- regressao_linear(X, Y, type = "ridge", lambda = 0.5)
#'
#' # Exibir os coeficientes
#' print("Coeficientes do modelo linear:")
#' print(modelo_lm$coeficientes)
#' print("Coeficientes do modelo ridge:")
#' print(modelo_ridge$coeficientes)
#' @export
regressao_linear <- function(X, Y, type = "lm", lambda = 0.5) {
# Validação das entradas
if (!is.matrix(X) || !is.numeric(X) || !is.numeric(Y)) {
stop("X deve ser uma matriz numérica e Y deve ser um vetor numérico.")
}
if (nrow(X) != length(Y)) {
stop("O número de linhas em X deve ser igual ao comprimento de Y.")
}
if (!is.vector(Y) || length(dim(Y)) > 1) {
stop("Y deve ser um vetor unidimensional.")
}
if (nrow(X) == 0 || ncol(X) == 0) {
stop("X não pode ser vazio.")
}
if (any(is.na(X)) || any(is.na(Y))) {
stop("X e Y não podem conter valores NA.")
}
if (ncol(X) < 1) {
stop("X deve ter pelo menos uma coluna de preditores.")
}
if(type == "lm"){
coeficientes <- solve(t(X) %*% X) %*% t(X) %*% Y    #Podemos utilziar fatoracao QR para resolver essa inversa
}else if(type == "ridge"){
X <- scale(X)       #Normalizando o X, como indicando em algumas literaturas
coeficientes <- solve(t(X) %*% X + lambda*diag(ncol(X))) %*% t(X) %*% Y
}
Y_pred <- X %*% coeficientes
residuos <- Y - Y_pred
grafico_observado_vs_predito <- ggplot(data = data.frame(Y, Y_pred), aes(x = Y, y = Y_pred)) +
geom_point(color = "blue") + labs(title = "Observado vs Predito",
x = "Valores Observados", y = "Valores Preditos")
return(list(coeficientes = coeficientes,
residuos = residuos,
valores_preditos = Y_pred, obs_vs_pred = grafico_observado_vs_predito))
}
#' Análise de Resíduos de um Modelo de Regressão
#'
#' Esta função gera gráficos para analisar os resíduos de um modelo de regressão linear.
#' Ela plota o gráfico de resíduos vs. valores ajustados, um histograma dos resíduos,
#' um gráfico Q-Q para verificar a normalidade dos resíduos, e um gráfico de autocorrelação
#' dos resíduos.
#'
#' @param resultados Uma lista contendo os resultados do ajuste do modelo.
#' Deve incluir:
#' \itemize{
#'   \item \code{coeficientes}: vetor de coeficientes do modelo.
#'   \item \code{residuos}: vetor de resíduos do modelo.
#'   \item \code{valores_preditos}: vetor de valores preditos pelo modelo.
#' }
#'
#' @return Uma lista de gráficos gerados, contendo:
#' \itemize{
#'   \item \code{grafico_residuos_ajustados}: gráfico de resíduos vs. valores ajustados.
#'   \item \code{grafico_histograma_res}: histograma dos resíduos.
#'   \item \code{grafico_qq_res}: gráfico Q-Q dos resíduos.
#'   \item \code{grafico_acf_residuos}: gráfico de autocorrelação dos resíduos.
#' }
#'
#' @examples
#' # Ajustar o modelo
#' resultado <- ajustar_regressao_linear(X, Y)
#'
#' # Analisar os resíduos
#' graficos_resultados <- analise_residuos(resultado)
#'
#' @export
analise_residuos <- function(resultados){
if (class(resultados) != "list") {
stop("X deve ser uma matriz numérica e Y deve ser um vetor numérico.")
}
coeficientes <- resultados$coeficientes
residuos <- resultados$residuos
Y_pred <- resultados$valores_preditos
graficos <- list()
graficos$grafico_res_ajustados <- ggplot(data = data.frame(Y_pred, residuos), aes(x = Y_pred, y = residuos)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Gráfico de Resíduos vs. Ajustados",
x = "Valores Ajustados",
y = "Resíduos") + theme_bw()
graficos$grafico_histograma_res <- ggplot(data = data.frame(residuos), aes(x = residuos)) +
geom_histogram(binwidth = 0.5, color = "black") +
labs(title = "Histograma dos Resíduos",
x = "Resíduos") + theme_bw()
graficos$grafico_qq_res <- ggplot(data = data.frame(residuos), aes(sample = residuos)) + stat_qq() +
stat_qq_line(color = "red") +
labs(title = "Gráfico Q-Q da Normal dos Resíduos") + theme_bw()
acf_data <- acf(residuos, plot = FALSE, lag.max = 30)  # Calcula autocorrelação sem plotar
graficos$grafico_acf_residuos <- ggplot(data = data.frame(Lag = acf_data$lag[-1], ACF = acf_data$acf[-1]), aes(x = Lag, y = ACF)) +
geom_bar(stat = "identity") +
labs(title = "Autocorrelação dos Resíduos", x = "Lag", y = "Autocorrelação") +
geom_hline(aes(col = "blue"), yintercept = c(1.96/sqrt(nrow(residuos)), -1.96/sqrt(nrow(residuos)))) +
theme_bw()
acf_data <- acf(residuos, plot = FALSE, lag.max = 30)
acf_df <- data.frame(
Lag = acf_data$lag[-1],
ACF = acf_data$acf[-1]
)
# Calcula os limites de confiança
n <- length(residuos)
ci_upper <- 1.96 / sqrt(n)
ci_lower <- -1.96 / sqrt(n)
graficos$grafico_acf_residuos <- ggplot(acf_df, aes(x = Lag, y = ACF)) +
geom_bar(stat = "identity", fill = "blue", color = "black", width = 0.7) +
labs(title = "Autocorrelação dos Resíduos", x = "Lag", y = "Autocorrelação") +
geom_hline(yintercept = ci_upper, aes(linetype = "dashed", color = "red")) +
geom_hline(yintercept = ci_lower, aes(linetype = "dashed", color = "red")) +
theme_bw() +
return(graficos)
}
#' Conjunto de Dados Exemplo
#'
#' Um conjunto de dados simulado contendo informações sobre indivíduos,
#' incluindo idade, renda anual, ocupação, sexo, altura, anos de experiência
#' e satisfação. Este conjunto de dados pode ser usado para ajustar modelos
#' de regressão e realizar análises estatísticas.
#'
#' @format Um data frame com 100 observações e 7 variáveis:
#' \describe{
#'   \item{idade}{Idade do indivíduo (numérico, entre 18 e 65).}
#'   \item{renda_anual}{Renda anual do indivíduo (numérico, distribuído conforme uma distribuição gamma).}
#'   \item{ocupacao}{Tipo de ocupação do indivíduo (categórico: "Empregado", "Desempregado", "Autônomo").}
#'   \item{sexo}{Sexo do indivíduo (categórico: "Homem", "Mulher").}
#'   \item{altura}{Altura do indivíduo em centímetros (numérico, distribuído normalmente).}
#'   \item{anos_exp}{Anos de experiência do indivíduo (numérico, valor entre 0 e 17).}
#'   \item{satisfacao}{Nível de satisfação do indivíduo (numérico, varia de 0 a 10).}
#' }
#'
#' @source Arquivo gerado aleatoriamente com a função `sample`, `rgamma` e `rnorm`.
"human"
regressao_linear(as.matrix(iris$Petal.Width), iris$Petal.Length) -> m1
analise_residuos(m1)
#' Ajustar um modelo de regressão linear
#'
#' @param X Uma matriz de variáveis preditoras (incluindo intercepto)
#' @param Y Um vetor da variável resposta
#' @param type Tipo de modelo a ser ajustado: "lm" para regressão linear simples ou "ridge" para regressão ridge. (default é "lm")
#' caso seja ridge, há uma normalização nos dados, ou seja, subtrai o desvio padrão e divide pela média.
#' @param lambda Parâmetro de penalização para regressão ridge (default é 0.5).
#' @return Uma lista contendo os coeficientes, resíduos, valores preditos e um gráfico.
#' @examples
#' # Criar a matriz de preditores e vetor de respostas
#' X <- as.matrix(dados[, c("idade", "renda_anual", "altura", "anos_exp")])
#' X <- cbind(1, X)  # Adiciona uma coluna de 1 para o intercepto
#' Y <- dados$satisfacao
#'
#' # Ajustar um modelo de regressão linear
#' modelo_lm <- regressao_linear(X, Y, type = "lm")
#'
#' # Ajustar um modelo de regressão ridge
#' modelo_ridge <- regressao_linear(X, Y, type = "ridge", lambda = 0.5)
#'
#' # Exibir os coeficientes
#' print("Coeficientes do modelo linear:")
#' print(modelo_lm$coeficientes)
#' print("Coeficientes do modelo ridge:")
#' print(modelo_ridge$coeficientes)
#' @export
regressao_linear <- function(X, Y, type = "lm", lambda = 0.5) {
# Validação das entradas
if (!is.matrix(X) || !is.numeric(X) || !is.numeric(Y)) {
stop("X deve ser uma matriz numérica e Y deve ser um vetor numérico.")
}
if (nrow(X) != length(Y)) {
stop("O número de linhas em X deve ser igual ao comprimento de Y.")
}
if (!is.vector(Y) || length(dim(Y)) > 1) {
stop("Y deve ser um vetor unidimensional.")
}
if (nrow(X) == 0 || ncol(X) == 0) {
stop("X não pode ser vazio.")
}
if (any(is.na(X)) || any(is.na(Y))) {
stop("X e Y não podem conter valores NA.")
}
if (ncol(X) < 1) {
stop("X deve ter pelo menos uma coluna de preditores.")
}
if(type == "lm"){
coeficientes <- solve(t(X) %*% X) %*% t(X) %*% Y    #Podemos utilziar fatoracao QR para resolver essa inversa
}else if(type == "ridge"){
X <- scale(X)       #Normalizando o X, como indicando em algumas literaturas
coeficientes <- solve(t(X) %*% X + lambda*diag(ncol(X))) %*% t(X) %*% Y
}
Y_pred <- X %*% coeficientes
residuos <- Y - Y_pred
grafico_observado_vs_predito <- ggplot(data = data.frame(Y, Y_pred), aes(x = Y, y = Y_pred)) +
geom_point(color = "blue") + labs(title = "Observado vs Predito",
x = "Valores Observados", y = "Valores Preditos")
return(list(coeficientes = coeficientes,
residuos = residuos,
valores_preditos = Y_pred, obs_vs_pred = grafico_observado_vs_predito))
}
#' Análise de Resíduos de um Modelo de Regressão
#'
#' Esta função gera gráficos para analisar os resíduos de um modelo de regressão linear.
#' Ela plota o gráfico de resíduos vs. valores ajustados, um histograma dos resíduos,
#' um gráfico Q-Q para verificar a normalidade dos resíduos, e um gráfico de autocorrelação
#' dos resíduos.
#'
#' @param resultados Uma lista contendo os resultados do ajuste do modelo.
#' Deve incluir:
#' \itemize{
#'   \item \code{coeficientes}: vetor de coeficientes do modelo.
#'   \item \code{residuos}: vetor de resíduos do modelo.
#'   \item \code{valores_preditos}: vetor de valores preditos pelo modelo.
#' }
#'
#' @return Uma lista de gráficos gerados, contendo:
#' \itemize{
#'   \item \code{grafico_residuos_ajustados}: gráfico de resíduos vs. valores ajustados.
#'   \item \code{grafico_histograma_res}: histograma dos resíduos.
#'   \item \code{grafico_qq_res}: gráfico Q-Q dos resíduos.
#'   \item \code{grafico_acf_residuos}: gráfico de autocorrelação dos resíduos.
#' }
#'
#' @examples
#' # Ajustar o modelo
#' resultado <- ajustar_regressao_linear(X, Y)
#'
#' # Analisar os resíduos
#' graficos_resultados <- analise_residuos(resultado)
#'
#' @export
analise_residuos <- function(resultados){
if (class(resultados) != "list") {
stop("X deve ser uma matriz numérica e Y deve ser um vetor numérico.")
}
coeficientes <- resultados$coeficientes
residuos <- resultados$residuos
Y_pred <- resultados$valores_preditos
graficos <- list()
graficos$grafico_res_ajustados <- ggplot(data = data.frame(Y_pred, residuos), aes(x = Y_pred, y = residuos)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Gráfico de Resíduos vs. Ajustados",
x = "Valores Ajustados",
y = "Resíduos") + theme_bw()
graficos$grafico_histograma_res <- ggplot(data = data.frame(residuos), aes(x = residuos)) +
geom_histogram(binwidth = 0.5, color = "black") +
labs(title = "Histograma dos Resíduos",
x = "Resíduos") + theme_bw()
graficos$grafico_qq_res <- ggplot(data = data.frame(residuos), aes(sample = residuos)) + stat_qq() +
stat_qq_line(color = "red") +
labs(title = "Gráfico Q-Q da Normal dos Resíduos") + theme_bw()
acf_data <- acf(residuos, plot = FALSE, lag.max = 30)  # Calcula autocorrelação sem plotar
graficos$grafico_acf_residuos <- ggplot(data = data.frame(Lag = acf_data$lag[-1], ACF = acf_data$acf[-1]), aes(x = Lag, y = ACF)) +
geom_bar(stat = "identity") +
labs(title = "Autocorrelação dos Resíduos", x = "Lag", y = "Autocorrelação") +
geom_hline(aes(col = "blue"), yintercept = c(1.96/sqrt(nrow(residuos)), -1.96/sqrt(nrow(residuos)))) +
theme_bw()
acf_data <- acf(residuos, plot = FALSE, lag.max = 30)
acf_df <- data.frame(
Lag = acf_data$lag[-1],
ACF = acf_data$acf[-1]
)
# Calcula os limites de confiança
n <- length(residuos)
ci_upper <- 1.96 / sqrt(n)
ci_lower <- -1.96 / sqrt(n)
graficos$grafico_acf_residuos <- ggplot(acf_df, aes(x = Lag, y = ACF)) +
geom_bar(stat = "identity", fill = "blue", color = "black", width = 0.7) +
labs(title = "Autocorrelação dos Resíduos", x = "Lag", y = "Autocorrelação") +
geom_hline(yintercept = ci_upper) + geom_hline(yintercept = ci_lower) +
theme_bw() +
return(graficos)
}
#' Conjunto de Dados Exemplo
#'
#' Um conjunto de dados simulado contendo informações sobre indivíduos,
#' incluindo idade, renda anual, ocupação, sexo, altura, anos de experiência
#' e satisfação. Este conjunto de dados pode ser usado para ajustar modelos
#' de regressão e realizar análises estatísticas.
#'
#' @format Um data frame com 100 observações e 7 variáveis:
#' \describe{
#'   \item{idade}{Idade do indivíduo (numérico, entre 18 e 65).}
#'   \item{renda_anual}{Renda anual do indivíduo (numérico, distribuído conforme uma distribuição gamma).}
#'   \item{ocupacao}{Tipo de ocupação do indivíduo (categórico: "Empregado", "Desempregado", "Autônomo").}
#'   \item{sexo}{Sexo do indivíduo (categórico: "Homem", "Mulher").}
#'   \item{altura}{Altura do indivíduo em centímetros (numérico, distribuído normalmente).}
#'   \item{anos_exp}{Anos de experiência do indivíduo (numérico, valor entre 0 e 17).}
#'   \item{satisfacao}{Nível de satisfação do indivíduo (numérico, varia de 0 a 10).}
#' }
#'
#' @source Arquivo gerado aleatoriamente com a função `sample`, `rgamma` e `rnorm`.
"human"
test_that("Função falha com X ou Y possuindo valores faltantes", {
matriz_constante <- matrix(c(1, 1, NA, 2, 2, 2), nrow = 3)
expect_error(regressao_linear(matriz_constante, Y = c(1,2,NA)))
})
library(testthat)
test_that("Função falha com coluna constante", {
matriz_constante <- matrix(c(1, 1, 1, 2, 2, 2), nrow = 3)
expect_error(regressao_linear(matriz_constante, Y = c(1,2,2)))
})
test_that("Função falha com X ou Y possuindo valores faltantes", {
matriz_constante <- matrix(c(1, 1, NA, 2, 2, 2), nrow = 3)
expect_error(regressao_linear(matriz_constante, Y = c(1,2,NA)))
})
test_that("Função falha com X ou Y possuindo tamanhos diferentes", {
matriz_constante <- matrix(c(1, 1, 1, 2, 2, 2), nrow = 3)
expect_error(regressao_linear(matriz_constante, Y = c(1,2)))
})
# test_that("Função falha com matriz sem posto completo", {
#   matriz_incompleta <- matrix(c(1, 2, 1, 2, 3, 6), nrow = 3)
#   expect_error(regressao_linear(matriz_incompleta, Y = c(5,6,5)))
# })
test_that("Resíduos são zero quando Y é perfeitamente descrito por Xβ", {
X <- matrix(c(1, 2, 3), nrow = 3)
Y <- c(5, 10, 15)
resultado <- regressao_linear(X, Y)
expect_equal(sum(resultado$residuos^2), 0)
})
# n <- 100
# dados <- data.frame(idade = sample(18:65, n, replace = TRUE),
#                     renda_anual = round(rgamma(n, scale = 1200, shape = 12), 3),
#                     ocupacao = sample(c("Empregado", "Desempregado", "Autônomo"), n, replace = TRUE),
#                     sexo = sample(c("Homem", "Mulher"), n, replace = TRUE),
#                     altura = round(rnorm(n, mean = 173, sd = 6), 3),
#                     anos_exp = sample(18:35, n, replace = TRUE) - sample(0:18, n, replace = TRUE),
#                     satisfacao =  sample(seq(0, 10, by = 0.1), n, replace = TRUE))
test_that("Função falha com coluna constante", {
matriz_constante <- matrix(c(1, 1, 1, 2, 2, 2), nrow = 3)
expect_error(regressao_linear(matriz_constante, Y = c(1,2,2)))
})
test_that("Função falha com X ou Y possuindo valores faltantes", {
matriz_constante <- matrix(c(1, 1, NA, 2, 2, 2), nrow = 3)
expect_error(regressao_linear(matriz_constante, Y = c(1,2,NA)))
})
test_that("Função falha com X ou Y possuindo tamanhos diferentes", {
matriz_constante <- matrix(c(1, 1, 1, 2, 2, 2), nrow = 3)
expect_error(regressao_linear(matriz_constante, Y = c(1,2)))
})
usethis::use_testthat()
test_check("regressao")
usethis::use_test()
matriz <- matrix(c(2, 4, 6, 3, 5, 7), nrow = 3, byrow = TRUE)
matriz
nova_matriz <- cbind(1, matriz)
nova_matriz
devtools::build_readme()
install.packages("devtools")
library(devtools)
devtools::build_readme()
devtools::build_readme()
